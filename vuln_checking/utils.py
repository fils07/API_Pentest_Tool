import re

def malformedRequest(chat_session,base_request,checkpoints):
    response = chat_session.send_message(f"Task: Generate modified requests based on an initial web request and a set of security checkpoints.\n \
    Instructions :\n \
    \t 1. You will receive a web request in text form. \n \
    \t 2. You will also receive a list of security checkpoints. \n \
    \t 3. For each security checkpoint, you must generate a new version of the web request that respects that checkpoint. \n \
    \t 4. If a security checkpoint is not applicable to the given web request, return 'NA'. \n \
    Output format : \n \
    \t  - The output should be a series of modified requests, each separated by a line. \n \
    \t  - If a security checkpoint is not applicable, return 'NA' for that checkpoint. \n \
    Example: \n \
    \t  Input: \n \
    \t   - Web Request: {{'Method' : 'GET','URL':'/api/data?user_id=123','Headers':{{'content-length':'47'}},'Body':{{}}}} \n \
    \t   - Security Checkpoints : \n \
    \t\t      1. Check if the user ID is not predictible. \n \
    \t\t      2. Ensure the request uses HTTPS. \n \
    \t  Expected output : \n \
    \t\t      {{'Method' : 'GET','URL':'/api/data?user_id=12345','Headers':{{'content-length':'47'}},'Body':{{}}}} \n \
    \t\t      NA \n \
    Your task: Use the above format to generate modified queries. \n \
    \t   Given request : {base_request} \n \
    \t   Given checkpoints:{checkpoints}")
    return response.text

def str_to_dict(string):
    # Diviser la chaîne en lignes
    lines = string.split('\n')

    # Créer un dictionnaire en divisant chaque ligne par le premier ':'
    result = {}
    for line in lines:
        if ':' in line:  # Vérifier que la ligne contient bien ':'
            key, value = line.split(':', 1)
            result[key] = value
    return result
class ApiRequest:
    def __init__(self, url, method, headers=None, body=None):
        self.url = url
        self.method = method
        self.headers = headers or {}
        self.body = body

    def send(self):
        import requests
        try:
            response = requests.request(
                method=self.method,
                url=self.url,
                headers=self.headers,
                data=self.body
            )
            return response
        except requests.exceptions.RequestException as e:
            return f"An error occurred: {e}"
    
    def __str__(self)->str:
        return f"Method: {self.method} Headers:{self.headers} Body : {self.body}"