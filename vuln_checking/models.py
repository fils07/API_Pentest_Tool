from django.db import models
from collectionmanagement.models import Endpoint
from django.core.exceptions import ValidationError

class Vulnerability(models.Model):
    Name = models.CharField(max_length=100)
    Description = models.TextField()
    Exploitability = models.IntegerField()
    Prevalence = models.IntegerField()
    WeaknessDetect = models.IntegerField()
    TechnicalImpact = models.IntegerField()
    
    @property
    def riskScore(self):
       return self.Exploitability + self.Prevalence + self.WeaknessDetect + self.TechnicalImpact
    
    def __str__(self) -> str:
        return self.Name

# Point de contrôle de sécurité
'''
 Chaque point de contrôle de sécurité est défini par son nom(P1), sa description, la vulnérabilité associée
Checkpoint(id,name,description,vulnerability,tools,step)
'''
class SecurityCheckpoint(models.Model):
    Name = models.CharField(max_length=100)
    Description = models.TextField()
    Vulnerability = models.ForeignKey(Vulnerability, on_delete=models.CASCADE)
    Steps = models.TextField()
    
    def __str__(self) -> str:
        return self.Name
# Scan 
'''
 A chaque scan, on associe à un endpoint la réponse(YES,NO,NOT) par rapport à un checkpoint
 Plus tard l'auditeur pourra remplir les impacts, ce sera subjectif selon chaque expert
 Colonnes de la table scan :
    - Id
    - Nom du scan
    - id du endpoint
    - id du security checkpoint
    - La requête de base
    - La réponse
    - La requête modifiée
    - La réponse à la requête modifiée
'''
class Scan(models.Model):
    STATUS = (
        ('YES', 'Yes'),
        ('NO', 'No'),
        ('NOT', 'Not'),
    )
    CID = (
        (1, 1),
        (2,2),
        (3,3),
    )
    Name = models.CharField(max_length=100)
    Endpoint = models.ForeignKey(Endpoint,on_delete=models.CASCADE)
    SecurityCheckpoint = models.ForeignKey(SecurityCheckpoint,on_delete=models.CASCADE)
    BaseRequest = models.TextField()
    BaseResponse = models.TextField()
    ModifiedRequest = models.TextField()
    ModifiedResponse = models.TextField()
    Status = models.CharField(max_length=3,choices=STATUS)
    ImpactConfidentiality = models.IntegerField(choices=CID,blank=True)
    ImpactIntegrity = models.IntegerField(choices=CID,blank=True)
    ImpactAvailability = models.IntegerField(choices=CID,blank=True)

    def clean(self) :
        if self.Status == 'YES' and not self.ImpactConfidentiality and not self.ImpactAvailability and not self.ImpactIntegrity:
            raise ValidationError('My other field is required when my field is set to YES')
        elif self.Status!='YES' and self.ImpactIntegrity or self.ImpactAvailability or self.ImpactIntegrity :
            raise ValidationError('My other field cannot be set when my field is not set to YES')
    
    @property
    def impactScore(self):
        return self.ImpactAvailability+self.ImpactConfidentiality+self.ImpactIntegrity